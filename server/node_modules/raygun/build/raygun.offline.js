/*
 * raygun
 * https://github.com/MindscapeHQ/raygun4node
 *
 * Copyright (c) 2015 MindscapeHQ
 * Licensed under the MIT license.
 */
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var debug = require("debug")("raygun");
var OfflineStorage = /** @class */ (function () {
    function OfflineStorage(transport) {
        this.cachePath = "";
        this.cacheLimit = 100;
        this.transport = transport;
    }
    OfflineStorage.prototype._sendAndDelete = function (item) {
        var storage = this;
        fs_1.default.readFile(path_1.default.join(this.cachePath, item), "utf8", function (err, cacheContents) {
            storage.transport.send(cacheContents);
            fs_1.default.unlink(path_1.default.join(storage.cachePath, item), function () { });
        });
    };
    OfflineStorage.prototype.init = function (offlineStorageOptions) {
        if (!offlineStorageOptions || !offlineStorageOptions.cachePath) {
            throw new Error("Cache Path must be set before Raygun can cache offline");
        }
        this.cachePath = offlineStorageOptions.cachePath;
        this.cacheLimit = offlineStorageOptions.cacheLimit || 100;
        debug("offline storage - initialized (cachePath=" + this.cachePath + ", cacheLimit=" + this.cacheLimit);
        if (!fs_1.default.existsSync(this.cachePath)) {
            fs_1.default.mkdirSync(this.cachePath);
        }
        return this;
    };
    OfflineStorage.prototype.save = function (transportItem, callback) {
        var storage = this;
        var filename = path_1.default.join(storage.cachePath, Date.now() + ".json");
        fs_1.default.readdir(storage.cachePath, function (err, files) {
            if (err) {
                console.log("[Raygun] Error reading cache folder");
                console.log(err);
                return callback(err);
            }
            if (files.length > storage.cacheLimit) {
                console.log("[Raygun] Error cache reached limit");
                return callback(null);
            }
            fs_1.default.writeFile(filename, transportItem, "utf8", function (err) {
                if (!err) {
                    debug("offline storage - wrote message to " + filename);
                    return callback(null);
                }
                console.log("[Raygun] Error writing to cache folder");
                console.log(err);
                return callback(err);
            });
        });
    };
    OfflineStorage.prototype.retrieve = function (callback) {
        fs_1.default.readdir(this.cachePath, callback);
    };
    OfflineStorage.prototype.send = function (callback) {
        var storage = this;
        storage.retrieve(function (err, items) {
            if (err) {
                console.log("[Raygun] Error reading cache folder");
                console.log(err);
                return callback(err);
            }
            if (items.length > 0) {
                debug("offline storage - transporting ${items.length} message(s) from cache");
            }
            for (var i = 0; i < items.length; i++) {
                storage._sendAndDelete(items[i]);
            }
            callback(err, items);
        });
    };
    return OfflineStorage;
}());
exports.OfflineStorage = OfflineStorage;
