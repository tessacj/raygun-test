/// <reference types="node" />
import type { IncomingMessage } from "http";
import { Callback, HTTPOptions, SendOptions } from "./types";
export declare type MessageAndCallback = {
    serializedMessage: string;
    callback: Callback<IncomingMessage> | null;
};
export declare type PreparedBatch = {
    payload: string;
    messageCount: number;
    callbacks: Callback<IncomingMessage>[];
};
export declare const MAX_MESSAGES_IN_BATCH = 100;
export declare const MAX_BATCH_SIZE_BYTES = 1638400;
export declare class RaygunBatchTransport {
    private messageQueue;
    private intervalId;
    private httpOptions;
    private interval;
    private batchId;
    constructor(options: {
        interval: number;
        httpOptions: HTTPOptions;
    });
    send(options: SendOptions): void;
    startProcessing(): void;
    stopProcessing(): void;
    private process;
}
export declare function prepareBatch(messageQueue: MessageAndCallback[]): PreparedBatch;
