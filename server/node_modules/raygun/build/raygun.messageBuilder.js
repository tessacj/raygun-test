/*
 * raygun
 * https://github.com/MindscapeHQ/raygun4node
 *
 * Copyright (c) 2015 MindscapeHQ
 * Licensed under the MIT license.
 */
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = __importDefault(require("os"));
var stack_trace_1 = __importDefault(require("stack-trace"));
var humanString = require("object-to-human-string");
var packageDetails = require("../package.json");
function filterKeys(obj, filters) {
    if (!obj || !filters || typeof obj !== "object") {
        return obj;
    }
    Object.keys(obj).forEach(function (i) {
        if (filters.indexOf(i) > -1) {
            delete obj[i];
        }
        else {
            obj[i] = filterKeys(obj[i], filters);
        }
    });
    return obj;
}
function getStackTrace(error, options) {
    var stack = [];
    var trace = stack_trace_1.default.parse(error);
    trace.forEach(function (callSite) {
        var frame = {
            lineNumber: callSite.getLineNumber(),
            className: callSite.getTypeName() || "unknown",
            fileName: callSite.getFileName(),
            methodName: callSite.getFunctionName() || "[anonymous]",
        };
        if (!!options.reportColumnNumbers &&
            typeof callSite.getColumnNumber === "function") {
            frame.columnNumber = callSite.getColumnNumber();
        }
        stack.push(frame);
    });
    return stack;
}
function buildError(error, options) {
    var builtError = {
        stackTrace: getStackTrace(error, options),
        message: error.message || "NoMessage",
        className: error.name,
    };
    var innerError = undefined;
    if (options.innerErrorFieldName) {
        innerError =
            typeof error[options.innerErrorFieldName] === "function"
                ? error[options.innerErrorFieldName]()
                : error[options.innerErrorFieldName];
    }
    if (innerError instanceof Error) {
        builtError.innerError = buildError(innerError, options);
    }
    return builtError;
}
var RaygunMessageBuilder = /** @class */ (function () {
    function RaygunMessageBuilder(options) {
        if (options === void 0) { options = {}; }
        options = options || {};
        this.options = options;
        this._filters = options.filters || [];
        this.message = {
            occurredOn: new Date(),
            details: {
                client: {
                    name: "raygun-node",
                    version: packageDetails.version,
                },
            },
        };
    }
    RaygunMessageBuilder.prototype.build = function () {
        // TODO - this provides no type safety that you actually passed what is needed
        // probably need to abandon the fluent builder pattern for better types
        return this.message;
    };
    RaygunMessageBuilder.prototype.setErrorDetails = function (error) {
        if (!(error instanceof Error) &&
            typeof error !== "string" &&
            this.options.useHumanStringForObject) {
            error = humanString(error);
            this.message.details.groupingKey = error
                .replace(/\W+/g, "")
                .substring(0, 64);
        }
        if (typeof error === "string") {
            this.message.details.error = {
                message: error,
                stackTrace: [],
                className: "Error",
            };
            return this;
        }
        this.message.details.error = buildError(error, this.options);
        return this;
    };
    RaygunMessageBuilder.prototype.setEnvironmentDetails = function () {
        var environment = {
            osVersion: os_1.default.type() + " " + os_1.default.platform() + " " + os_1.default.release(),
            architecture: os_1.default.arch(),
            totalPhysicalMemory: os_1.default.totalmem(),
            availablePhysicalMemory: os_1.default.freemem(),
            utcOffset: new Date().getTimezoneOffset() / -60.0,
        };
        // cpus seems to return undefined on some systems
        var cpus = os_1.default.cpus();
        if (cpus && cpus.length && cpus.length > 0) {
            environment.processorCount = cpus.length;
            environment.cpu = cpus[0].model;
        }
        this.message.details.environment = environment;
        return this;
    };
    RaygunMessageBuilder.prototype.setMachineName = function (machineName) {
        this.message.details.machineName = machineName || os_1.default.hostname();
        return this;
    };
    RaygunMessageBuilder.prototype.setUserCustomData = function (customData) {
        this.message.details.userCustomData = customData;
        return this;
    };
    RaygunMessageBuilder.prototype.setTags = function (tags) {
        if (Array.isArray(tags)) {
            this.message.details.tags = tags;
        }
        return this;
    };
    RaygunMessageBuilder.prototype.setRequestDetails = function (request) {
        if (request) {
            var host = "hostname" in request ? request.hostname : request.host;
            this.message.details.request = {
                hostName: host,
                url: request.path,
                httpMethod: request.method,
                ipAddress: request.ip,
                queryString: filterKeys(request.query, this._filters),
                headers: filterKeys(request.headers, this._filters),
                form: filterKeys(request.body, this._filters),
            };
        }
        return this;
    };
    RaygunMessageBuilder.prototype.setUser = function (user) {
        var userData;
        if (user instanceof Function) {
            userData = user();
        }
        else {
            userData = user;
        }
        if (userData instanceof Object) {
            this.message.details.user = this.extractUserProperties(userData);
        }
        else if (typeof userData === "string") {
            this.message.details.user = { identifier: userData };
        }
        return this;
    };
    RaygunMessageBuilder.prototype.setVersion = function (version) {
        this.message.details.version = version;
        return this;
    };
    RaygunMessageBuilder.prototype.extractUserProperties = function (userData) {
        var data = {};
        if (userData.identifier) {
            data.identifier = userData.identifier;
        }
        if (userData.email) {
            data.email = userData.email;
        }
        if (userData.fullName) {
            data.fullName = userData.fullName;
        }
        if (userData.firstName) {
            data.firstName = userData.firstName;
        }
        if (userData.uuid) {
            data.uuid = userData.uuid;
        }
        return data;
    };
    return RaygunMessageBuilder;
}());
exports.RaygunMessageBuilder = RaygunMessageBuilder;
