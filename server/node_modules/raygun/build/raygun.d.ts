import { CustomData, Hook, Message, IOfflineStorage, OfflineStorageOptions, RawUserData, RaygunOptions, Tag, Transport } from "./types";
import type { Request, Response, NextFunction } from "express";
import { RaygunBatchTransport } from "./raygun.batch";
declare type SendCB = (error: Error | null, items: string[] | undefined) => void;
declare class Raygun {
    _apiKey: string | undefined;
    _filters: string[];
    _user: RawUserData | undefined;
    _version: string;
    _host: string | undefined;
    _port: number | undefined;
    _useSSL: boolean | undefined;
    _onBeforeSend: Hook<Message> | undefined;
    _offlineStorage: IOfflineStorage | undefined;
    _isOffline: boolean | undefined;
    _offlineStorageOptions: OfflineStorageOptions | undefined;
    _groupingKey: Hook<string> | undefined;
    _tags: Tag[] | undefined;
    _useHumanStringForObject: boolean | undefined;
    _reportColumnNumbers: boolean | undefined;
    _innerErrorFieldName: string | undefined;
    _batch: boolean;
    _batchTransport: RaygunBatchTransport | undefined;
    init(options: RaygunOptions): this;
    user(req?: Request): RawUserData | null;
    setUser(user: RawUserData): this;
    expressCustomData(error: Error, request: Request): {};
    setVersion(version: string): this;
    onBeforeSend(onBeforeSend: Hook<Message>): this;
    groupingKey(groupingKey: Hook<string>): this;
    offline(): void;
    online(callback?: SendCB): void;
    setTags(tags: Tag[]): void;
    transport(): Transport;
    send(exception: Error | string, customData?: CustomData, callback?: (err: Error | null) => void, request?: Request, tags?: Tag[]): Message;
    private reportUncaughtExceptions;
    private sendSync;
    expressHandler(err: Error, req: Request, res: Response, next: NextFunction): void;
    stop(): void;
    private buildSendOptions;
    private offlineTransport;
    private offlineStorage;
}
export declare const Client: typeof Raygun;
export declare type Client = Raygun;
declare const _default: {
    Client: typeof Raygun;
};
export default _default;
