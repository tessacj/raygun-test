/// <reference types="node" />
import type { IncomingMessage } from "http";
export declare type IndexableError = Error & {
    [key: string]: any;
};
export declare type MessageBuilderOptions = {
    reportColumnNumbers?: boolean;
    useHumanStringForObject?: boolean;
    innerErrorFieldName?: string;
    filters?: string[];
};
export declare type StackFrame = {
    lineNumber: number;
    columnNumber?: number;
    className: string;
    fileName: string;
    methodName: string;
};
export declare type Message = {
    occurredOn: Date;
    details: MessageDetails;
};
export declare type MessageBuilding = {
    occurredOn: Date;
    details: Partial<MessageDetails>;
};
export declare type BuiltError = {
    message: string;
    stackTrace?: StackFrame[];
    className?: string;
    innerError?: BuiltError;
};
export declare type MessageDetails = {
    client: {
        name: string;
        version: string;
    };
    groupingKey: string | null;
    error: BuiltError;
    version: string;
    user: UserDetails;
    request: RequestDetails;
    tags: Tag[];
    userCustomData: CustomData;
    machineName: string;
    environment: Environment;
    correlationId: string | null;
};
export declare type Environment = {
    osVersion: string;
    architecture: string;
    totalPhysicalMemory: number;
    availablePhysicalMemory: number;
    utcOffset: number;
    processorCount?: number;
    cpu?: string;
};
export declare type Tag = string;
export declare type SendOptions = {
    message: string;
    callback: Callback<IncomingMessage>;
    http: HTTPOptions;
};
export declare type SendOptionsWithoutCB = Omit<SendOptions, "callback">;
export declare type HTTPOptions = {
    useSSL: boolean;
    host: string | undefined;
    port: number | undefined;
    apiKey: string;
};
export declare type CustomData = any;
export declare type RequestParams = ({
    host: string;
} | {
    hostname: string;
}) & CommonRequestParams;
declare type CommonRequestParams = {
    path: string;
    method: string;
    ip: string;
    query: object;
    headers: object;
    body: object;
};
export declare type RequestDetails = {
    hostName: string;
    url: string;
    httpMethod: string;
    ipAddress: string;
    queryString: object;
    headers: object;
    form: object;
};
export declare type UserDetails = {
    identifier?: string;
    uuid?: string;
    firstName?: string;
    lastName?: string;
    fullName?: string;
    email?: string;
};
export declare type RawUserData = {
    identifier?: string;
    uuid?: string;
    firstName?: string;
    lastName?: string;
    fullName?: string;
    email?: string;
};
export declare type OfflineStorageOptions = {
    cachePath: string;
    cacheLimit?: number;
};
export declare type Transport = {
    send(options: SendOptions): void;
};
export declare type MessageTransport = {
    send(message: string): void;
};
export declare type Hook<T> = (message: Message, exception: Error | string, customData: CustomData, request?: RequestParams, tags?: Tag[]) => T;
export interface IOfflineStorage {
    init(options: OfflineStorageOptions | undefined): void;
    save(message: string, callback: (error: Error | null) => void): void;
    retrieve(callback: (error: NodeJS.ErrnoException | null, items: string[]) => void): void;
    send(callback: (error: Error | null, items?: string[]) => void): void;
}
export declare type RaygunOptions = {
    apiKey: string;
    filters?: string[];
    host?: string;
    port?: number;
    useSSL?: boolean;
    onBeforeSend?: Hook<Message>;
    offlineStorage?: IOfflineStorage;
    offlineStorageOptions?: OfflineStorageOptions;
    isOffline?: boolean;
    groupingKey?: Hook<string>;
    tags?: Tag[];
    useHumanStringForObject?: boolean;
    reportColumnNumbers?: boolean;
    innerErrorFieldName?: string;
    batch?: boolean;
    batchFrequency?: number;
    reportUncaughtExceptions?: boolean;
};
export declare type CallbackNoError<T> = (t: T | null) => void;
export declare type CallbackWithError<T> = (e: Error | null, t: T | null) => void;
export declare function isCallbackWithError<T>(cb: Callback<T>): cb is CallbackWithError<T>;
export declare function callVariadicCallback<T>(callback: Callback<T>, error: Error | null, result: T | null): void;
export declare type Callback<T> = CallbackNoError<T> | CallbackWithError<T>;
export {};
